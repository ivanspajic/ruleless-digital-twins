@prefix : <http://www.semanticweb.org/ivans/ontologies/2025/instance-model-1#>.
@prefix meta: <http://www.semanticweb.org/ivans/ontologies/2025/dt-code-generation/>.
@prefix ssn: <http://www.w3.org/ns/ssn/>.
@prefix sosa: <http://www.w3.org/ns/sosa/>.
@include <OWL>.
@include <validation-rules.rules>.

// The following rule covers individuals with one or two constraints. Once an OptimalCondition constraint has been
// located, a mark will be placed to allow subsequent rules to match and fire.

[rule1a:    (?individual rdf:type owl:NamedIndividual)
            (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?observableProperty)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:withRestrictions ?bNode3)
            (?bNode3 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?observableProperty)
                print()
                print("Marked a value restriction with ObservableProperty", ?observableProperty)
                print()
]

[rule1b:   (?individual rdf:type owl:NamedIndividual)
            (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?observableProperty)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:withRestrictions ?bNode3)
            (?bNode3 rdf:rest ?bNode4)
            (?bNode4 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?observableProperty)
                print()
                print("Marked a value restriction with ObservableProperty", ?observableProperty)
                print()
]

// Upon locating the marks for OptimalCondition constraints or optimization targets, these rules find the
// respective PropertyChanges and use them for a temporary mark.

[rule2a:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?restriction xsd:minExclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2b:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?restriction xsd:minInclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2c:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?restriction xsd:maxExclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2d:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?restriction xsd:maxInclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2e:    (?thing meta:optimizesFor ?propertyChange)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a PropertyChange to optimize for.")
                print()
]

// The following rules locate PropertyChange marks and generate appropriate ExecutionPlans, either with ActuatorStates
// or ConfigurableParameters. The last rule also creates a no-op ExecutionPlan. URI concatinations are used for
// generating unique names for unique combinations of elements in an ExecutionPlan. This ensures that no duplicate
// ExecutionPlans are generated in cases of, e.g., multiple actuators causing multiple different PropertyChanges.

[rule3a:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?actuatorState)
            (?actuatorState rdf:type meta:ActuatorState)
            uriConcat(?actuatorState, meta:ActuationExecutionPlan, ?executionName)
            ->  (?executionName rdf:type meta:ActuationExecutionPlan)
                (?executionName meta:hasActuatorState ?actuatorState)
                print()
                print("Generated ActuationExecutionPlan", ?executionName)
                print()
]

[rule3b:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?configurableParameter)
            (?configurableParameter rdf:type meta:ConfigurableParameter)
            (?propertyChange meta:alteredBy ?effect)
            uriConcat(?configurableParameter, ?effect, meta:ReconfigurationExecutionPlan, ?executionName)
            ->  (?executionName rdf:type meta:ReconfigurationExecutionPlan)
                (?executionName ssn:forProperty ?configurableParameter)
                (?executionName meta:affectsPropertyWith ?effect)
                print()
                print("Generated ReconfigurationExecutionPlan", ?executionName)
                print()
]

[rule3c:    uriConcat("no-op", meta:ExecutionPlan, ?executionName)
            ->  (?executionName rdf:type meta:ExecutionPlan)
                print()
                print("Generated no-op ExecutionPlan", ?executionName)
                print()
]