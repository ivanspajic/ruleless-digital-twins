@prefix : <http://www.semanticweb.org/ivans/ontologies/2025/instance-model-1#>.
@prefix meta: <http://www.semanticweb.org/ivans/ontologies/2025/dt-code-generation/>.
@prefix ssn: <http://www.w3.org/ns/ssn/>.
@prefix sosa: <http://www.w3.org/ns/sosa/>.
@include <OWL>.
@include <verification-rules.rules>.
@include <user-rules.rules>.



// The following rules cover individuals with one or two value constraints. Once an OptimalCondition constraint
// has been located, a mark will be placed to allow subsequent rules to match and fire.

[rule1a:    (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?property)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:withRestrictions ?bNode3)
            (?bNode3 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?property)
                print()
                print("Marked a value restriction with Property", ?property)
                print()
]

[rule1b:    (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?property)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:withRestrictions ?bNode3)
            (?bNode3 rdf:rest ?bNode4)
            (?bNode4 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?property)
                print()
                print("Marked a value restriction with Property", ?property)
                print()
]

// These rules support disjunctive constraint definitions in OptimalConditions. E.g., (>15, <=20) or (>=24, <35).
// Such definitions cover cases whose Property values might fit in disjoint ranges. Currently, only 2 constraints
// are supported, but it is naturally possible to support more.

[rule1c:    (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?property)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:unionOf ?bNode3)
            (?bNode3 rdf:first ?bNode4)
            (?bNode4 owl:withRestrictions ?bNode5)
            (?bNode5 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?property)
                print()
                print("Marked a value restriction with Property", ?property)
                print()
]

[rule1d:    (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?property)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:unionOf ?bNode3)
            (?bNode3 rdf:first ?bNode4)
            (?bNode4 owl:withRestrictions ?bNode5)
            (?bNode5 rdf:rest ?bNode6)
            (?bNode6 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?property)
                print()
                print("Marked a value restriction with Property", ?property)
                print()
]

[rule1e:    (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?property)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:unionOf ?bNode3)
            (?bNode3 rdf:rest ?bNode4)
            (?bNode4 rdf:first ?bNode5)
            (?bNode5 owl:withRestrictions ?bNode6)
            (?bNode6 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?property)
                print()
                print("Marked a value restriction with Property", ?property)
                print()
]

[rule1f:    (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?property)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:unionOf ?bNode3)
            (?bNode3 rdf:rest ?bNode4)
            (?bNode4 rdf:first ?bNode5)
            (?bNode5 owl:withRestrictions ?bNode6)
            (?bNode6 rdf:rest ?bNode7)
            (?bNode7 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?property)
                print()
                print("Marked a value restriction with Property", ?property)
                print()
]



// Upon locating the marks for OptimalCondition constraints or optimization targets, these rules find the
// relevant PropertyChanges and use them for a temporary mark.

[rule2a:    (?bNode rdf:comment ?property)
            (?property meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith ?someChange)
            (?bNode owl:hasValue ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraint(s) on", ?property)
                print()
]

[rule2b:    (?restriction rdf:comment ?property)
            (?property meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?restriction xsd:minExclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraint(s) on", ?property)
                print()
]

[rule2c:    (?restriction rdf:comment ?property)
            (?property meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?restriction xsd:minInclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraint(s) on", ?property)
                print()
]

[rule2d:    (?restriction rdf:comment ?property)
            (?property meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?restriction xsd:maxExclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraint(s) on", ?property)
                print()
]

[rule2e:    (?restriction rdf:comment ?property)
            (?property meta:propertyFor ?propertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?restriction xsd:maxInclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraint(s) on", ?property)
                print()
]

[rule2f:    (?thing meta:optimizesFor ?propertyChange)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange, "as a PropertyChange to optimize for.")
                print()
]



// The following rules locate PropertyChange marks and generate appropriate Actions, either with Actuators
// or ConfigurableParameters. URI concatinations are used for generating unique names for unique combinations of
// elements in an Action. This ensures that no duplicate Actions are generated in cases of, e.g., multiple
// actuators causing multiple different PropertyChanges.

[rule3a:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?actuator)
            (?actuator rdf:type sosa:Actuator)
            uriConcat(?actuator, meta:ActuationAction, ?actionName)
            ->  (?actionName rdf:type meta:ActuationAction)
                (?actionName meta:hasActuator ?actuator)
                print()
                print("Generated ActuationAction", ?actionName)
                print()
]

[rule3b:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?configurableParameter)
            (?configurableParameter rdf:type meta:ConfigurableParameter)
            uriConcat(?configurableParameter, meta:ReconfigurationAction, ?actionName)
            ->  (?actionName rdf:type meta:ReconfigurationAction)
                (?actionName ssn:forProperty ?configurableParameter)
                print()
                print("Generated ReconfigurationAction", ?actionName)
                print()
]