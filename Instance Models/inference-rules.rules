@prefix : <http://www.semanticweb.org/ivans/ontologies/2025/instance-model-1#>.
@prefix meta: <http://www.semanticweb.org/ivans/ontologies/2025/dt-code-generation/>.
@prefix ssn: <http://www.w3.org/ns/ssn/>.
@prefix sosa: <http://www.w3.org/ns/sosa/>.
@include <OWL>.

// The following rule covers individuals with one or two constraints. Once an OptimalCondition constraint has been
// located, a mark will be placed to allow subsequent rules to match and fire.

[rule1a:    (?individual rdf:type owl:NamedIndividual)
            (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?observableProperty)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:withRestrictions ?bNode3)
            (?bNode3 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?observableProperty)
                print()
                print("Marked a single-value restriction with ObservableProperty", ?observableProperty)
                print()
]

[rule1b:    (?individual rdf:type owl:NamedIndividual)
            (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?observableProperty)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:intersectionOf ?bNode3)
            (?bNode3 rdf:first ?bNode4)
            (?bNode4 owl:withRestrictions ?bNode5)
            (?bNode5 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?observableProperty)
                print()
                print("Marked a multi-value restriction with ObservableProperty", ?observableProperty)
                print()
]

[rule1c:    (?individual rdf:type owl:NamedIndividual)
            (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?observableProperty)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:intersectionOf ?bNode3)
            (?bNode3 rdf:rest ?bNode4)
            (?bNode4 rdf:first ?bNode5)
            (?bNode5 owl:withRestrictions ?bNode6)
            (?bNode6 rdf:first ?restriction)
            ->  (?restriction rdf:comment ?observableProperty)
                print()
                print("Marked a multi-value restriction with ObservableProperty", ?observableProperty)
                print()
]

// Upon locating the marks for OptimalCondition constraints or optimization targets, these rules find the
// respective PropertyChanges and set a mark for the class of required changes to the property in question.

[rule2a:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange rdf:type meta:PropertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?restriction xsd:minExclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2b:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange rdf:type meta:PropertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?restriction xsd:minInclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2c:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange rdf:type meta:PropertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?restriction xsd:maxExclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2d:    (?restriction rdf:comment ?observableProperty)
            (?observableProperty meta:propertyFor ?propertyChange)
            (?propertyChange rdf:type meta:PropertyChange)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?restriction xsd:maxInclusive ?value)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a relevant PropertyChange for the given constraints on")
                print(?observableProperty)
                print()
]

[rule2e:    (?thing meta:optimizesFor ?propertyChange)
            ->  (_: rdf:comment ?propertyChange)
                print()
                print("Located", ?propertyChange)
                print("as a PropertyChange to optimize for.")
                print()
]

// The following rules locate property change marks and generate appropriate Executions for optimal condition
// mitigation, either based on Actuators and ActuatorStates or ConfigurableProperty changes. The last rule
// also creates a no-op Strategy.

[rule3a:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?actuatorState)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?actuatorState rdf:type meta:ActuatorState)
            (?actuatorState meta:isStateOf ?actuator)
            (?actuator rdf:type sosa:Actuator)
            makeTemp(?execution)
            ->  (?execution rdf:type meta:ActuationExecution)
                (?execution meta:hasActuatorState ?actuatorState)
                (?execution meta:hasActuator ?actuator)
                (?execution meta:hasIdentifier ?execution)
                print()
                print("Generated ActuationExecution", ?execution)
                print()
]

[rule3b:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?actuatorState)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?actuatorState rdf:type meta:ActuatorState)
            (?actuatorState meta:isStateOf ?actuator)
            (?actuator rdf:type sosa:Actuator)
            makeTemp(?execution)
            ->  (?execution rdf:type meta:ActuationExecution)
                (?execution meta:hasActuatorState ?actuatorState)
                (?execution meta:hasActuator ?actuator)
                (?execution meta:hasIdentifier ?execution)
                print()
                print("Generated ActuationExecution", ?execution)
                print()
]

[rule3c:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?configurableProperty)
            (?propertyChange meta:affectsPropertyWith meta:ValueIncrease)
            (?configurableProperty rdf:type meta:ConfigurableProperty)
            (?propertyChange meta:alteredBy ?effect)
            makeTemp(?execution)
            ->  (?execution rdf:type meta:ReconfigurationExecution)
                (?execution ssn:forProperty ?configurableProperty)
                (?execution meta:affectsPropertyWith ?effect)
                (?execution meta:hasIdentifier ?execution)
                print()
                print("Generated ReconfigurationExecution", ?execution)
                print()
]

[rule3d:    (?thing rdf:comment ?propertyChange)
            (?propertyChange meta:enactedBy ?configurableProperty)
            (?propertyChange meta:affectsPropertyWith meta:ValueDecrease)
            (?configurableProperty rdf:type meta:ConfigurableProperty)
            (?propertyChange meta:alteredBy ?effect)
            makeTemp(?execution)
            ->  (?execution rdf:type meta:ReconfigurationExecution)
                (?execution ssn:forProperty ?configurableProperty)
                (?execution meta:affectsPropertyWith ?effect)
                (?execution meta:hasIdentifier ?execution)
                print()
                print("Generated ReconfigurationExecution", ?execution)
                print()
]

[rule3e:    makeTemp(?execution)
            ->  (?execution rdf:type meta:Execution)
                (?execution meta:hasIdentifier ?execution)
                print()
                print("Generated no-op Execution", ?execution)
                print()
]

// The following rules validate that system constraints and optimizations are not conflicting or useless.

[rule4a:    (?thing1 meta:optimizesFor ?propertyChange1)
            (?propertyChange1 ssn:forProperty ?property)
            (?thing2 meta:optimizesFor ?propertyChange2)
            (?propertyChange2 ssn:forProperty ?property)
            (?propertyChange1 meta:affectsPropertyWith meta:ValueIncrease)
            (?propertyChange2 meta:affectsPropertyWith meta:ValueDecrease)
            ->  print()
                print("Contradicting optimizations detected!")
                print(?thing1, "optimizes for", ?property, "with ValueIncrease through", ?propertyChange1)
                print(?thing2, "optimizes for", ?property, "with ValueDecrease through", ?propertyChange2)
                print()
]

// Only validating for optimal conditions that are allowed by the reasoner. These rules do not check the combination
// minExclusive (>) and maxExclusive (<) since this reduces to everything but the excluded value. E.g.,
// >15 and <15 = !15.

[rule4b:    (?restriction1 rdf:comment ?observableProperty)
            (?restriction1 xsd:minInclusive ?value)
            (?restriction2 rdf:comment ?observableProperty)
            (?restriction2 xsd:maxInclusive ?value)
            ->  print()
                print("Useless condition detected!")
                print("Conditions for", ?observableProperty, "are")
                print("greater than or equal to", ?value)
                print("and")
                print("less than or equal to", ?value)
                print("at the same time, which is not a restriction.")
                print()
]

[rule4c:    (?restriction1 rdf:comment ?observableProperty)
            (?restriction1 xsd:minInclusive ?value)
            (?restriction2 rdf:comment ?observableProperty)
            (?restriction2 xsd:maxExclusive ?value)
            ->  print()
                print("Useless condition detected!")
                print("Conditions for", ?observableProperty, "are")
                print("greater than or equal to", ?value)
                print("and")
                print("less than", ?value)
                print("at the same time, which is not a restriction.")
                print()
]

[rule4d:    (?restriction1 rdf:comment ?observableProperty)
            (?restriction1 xsd:minExclusive ?value)
            (?restriction2 rdf:comment ?observableProperty)
            (?restriction2 xsd:maxInclusive ?value)
            ->  print()
                print("Useless condition detected!")
                print("Conditions for", ?observableProperty, "are")
                print("greater than", ?value)
                print("and")
                print("less than or equal to", ?value)
                print("at the same time, which is not a restriction.")
                print()
]

[rule4e:    (?individual rdf:type owl:NamedIndividual)
            (?individual rdf:type meta:OptimalCondition)
            (?individual ssn:forProperty ?observableProperty)
            (?individual rdf:type ?bNode1)
            (?bNode1 owl:onDataRange ?bNode2)
            (?bNode2 owl:unionOf ?bNode3)
            ->  print()
                print("Useless condition detected!")
                print("Conditions for", ?observableProperty)
                print("contain an OR, which is not a restriction.")
                print()
]